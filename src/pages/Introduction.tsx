import styled from 'styled-components'
import { StyledNavLink } from '@/App';
import Markdown from 'react-markdown'

const Wrapper = styled.div`
  img[alt="workflowimg"] {
    width: 580px;
  }
`

function Introduction() {
  return (
    <Wrapper>
    <Markdown>{`
## What is Reader Guru?
The **Reader Guru** is a OpenAI-powered tool that integrated with OpenAI's capabilities of **summarizing** an entire book and **answering** questions based on the book.

This website is used for **Totally Free**, even without having to signup or signin. All codes of this site are available in [my git repo](https://github.com/hu-ke). Don't forget to give a star if you like it.

## Work Flow
Each summarizing or Q&A process may takes few minutes or more mainly based on your file size as well as OpenAI model's processing efficiency. It's necessary for us to have a grasp of what's going on under the hood.
Below is a diagram for the work flow.

![workflowimg](https://hukepublicbucket.oss-cn-hangzhou.aliyuncs.com/readerguru/readerguru-flow.png)

1. Before we start, you need to prepare a .pdf or .epub file. If you don't have one, just [click here to download a sample book](https://hukepublicbucket.oss-cn-hangzhou.aliyuncs.com/readerguru/IntoThinAirBook.pdf). After uploading, server side will take care of everything and you just need to wait. If you are not a developer, just ignore the following time-consuming steps. Both \`.pdf\` and \`.epub\` formats are supported. 
2. Server side will extract the whole texts from the book uploaded and use proper *Text Splitter* to split the texts into pieces of document.
3. Embeddings generated by leveraging [OpenAI embedding](https://platform.openai.com/docs/guides/embeddings) and vectors are created.
4. Vectors are created on Pinecone or local server.
5. Server side will return answers or summary based on user actions.

## Practice
    `}</Markdown>
      <StyledNavLink to={"/new-book"}>Click to Upload a book</StyledNavLink>
    </Wrapper>
  );
}

export default Introduction;